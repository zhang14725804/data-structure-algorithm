/*
	Â∞Ü‰∏Ä‰∏™ÊåâÁÖßÂçáÂ∫èÊéíÂàóÁöÑÊúâÂ∫èÊï∞ÁªÑÔºåËΩ¨Êç¢‰∏∫‰∏ÄÊ£µÈ´òÂ∫¶Âπ≥Ë°°‰∫åÂèâÊêúÁ¥¢Ê†ë„ÄÇ
	Êú¨È¢ò‰∏≠Ôºå‰∏Ä‰∏™È´òÂ∫¶Âπ≥Ë°°‰∫åÂèâÊ†ëÊòØÊåá‰∏Ä‰∏™‰∫åÂèâÊ†ëÊØè‰∏™ËäÇÁÇπ ÁöÑÂ∑¶Âè≥‰∏§‰∏™Â≠êÊ†ëÁöÑÈ´òÂ∫¶Â∑ÆÁöÑÁªùÂØπÂÄº‰∏çË∂ÖËøá 1„ÄÇ

	ÊÄùË∑ØÔºöÂπ≥Ë°°‰∫åÂèâÊ†ëÁ≠â‰ª∑‰∫é‰∏≠Â∫èÈÅçÂéÜ(Â∑¶„ÄÅÊ†π„ÄÅÂè≥)ÊòØÊúâÂ∫èÁöÑ
*/

/*
	ÊñπÊ≥ï1ÔºöDFS-ÈÄíÂΩí
	ÂâçÂ∫èÈÅçÂéÜÔºöÊ†πÂ∑¶Âè≥
	Ê≥®ÊÑèsliceÂèñÂÄºËåÉÂõ¥ „ÄêÂ∑¶Èó≠Âè≥ÂºÄ„ÄëÔºàÂ±ÖÁÑ∂Âç°Âà∞ËøôÈáå‰∫ÜÔºâ üòÖ
*/
func sortedArrayToBST(nums []int) *TreeNode {
	if len(nums) == 0 {
		return nil
	}
	// Âèñ‰∏≠Èó¥ËäÇÁÇπ
	mid := len(nums) / 2
	// Ê†π
	root := &TreeNode{Val: nums[mid]}
	// Â∑¶ „Äê 0 ~ mid-1„Äë
	root.Left = sortedArrayToBST(nums[:mid])
	// Âè≥ „Äêmid+1 ~ len(nums)„Äë
	root.Right = sortedArrayToBST(nums[mid+1:])
	return root
}

/*
	ÊñπÊ≥ï2ÔºöËø≠‰ª£Ôºå‰∏â‰∏™ÈòüÂàóÊ®°Êãü
	question ‰∏çÁêÜËß£ üòÖüòÖ
*/
func sortedArrayToBST(nums []int) *TreeNode {
	if len(nums) == 0 {
		return nil
	}
	// Ê†πËäÇÁÇπ
	root := &TreeNode{}
	// Â≠òÊîæËäÇÁÇπ
	var nodeQueue []*TreeNode
	// Â≠òÊîæÂ∑¶Âè≥Âå∫Èó¥‰∏ãÊ†á
	var leftQueue, rightQueue []int
	// Ê†πÔºåÂ∑¶Âè≥‰∏ãË°®ÂÖ•Èòü
	nodeQueue = append(nodeQueue, root)
	leftQueue = append(leftQueue, 0)
	rightQueue = append(rightQueue, len(nums)-1)

	for len(nodeQueue) > 0 {
		cnode := nodeQueue[0]
		nodeQueue = nodeQueue[1:]
		left := leftQueue[0]
		leftQueue = leftQueue[1:]
		right := rightQueue[0]
		rightQueue = rightQueue[1:]

		mid := left + (right-left)/2
		cnode.Val = nums[mid]

		// Â§ÑÁêÜÂ∑¶Âå∫Èó¥
		if left <= mid-1 {
			cnode.Left = &TreeNode{}
			nodeQueue = append(nodeQueue, cnode.Left)
			leftQueue = append(leftQueue, left)
			rightQueue = append(rightQueue, mid-1)
		}

		// Â§ÑÁêÜÂè≥Âå∫Èó¥
		if right >= mid+1 {
			cnode.Right = &TreeNode{}
			nodeQueue = append(nodeQueue, cnode.Right)
			leftQueue = append(leftQueue, mid+1)
			rightQueue = append(rightQueue, right)
		}
	}
	return root
}